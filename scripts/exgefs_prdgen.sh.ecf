#!/bin/ksh
export VERBOSE=yes
sname=$(basename $0)
export stream=${1}
echo $(date) $sname $stream begin
#####################################################################
echo "-----------------------------------------------------"
echo " exgefs_prdgen.sh.sms" 
echo " based on exglobal_post.sh.sms and exglobal_post_pgrb2.sh.sms" 
echo " interpolate master post files (GRIB2) and convert to GRIB1"
echo " Sep 07 - Wobus - reorganized script"
echo " Aug 10 - Wobus - added test for control file from post"
echo " Jun 11 - Wobus - moved master post files to /com"
echo " Jun 14 - Hou   - adopted to grb2 version master files as input"
echo " Feb 17 - Meng  - Unify version for creating all grids(1.0, 2.5"
echo "                  and 0.5) files. "
echo " Sep 18 - Cui   - add option for 0.25d grids "
echo "-----------------------------------------------------"
#####################################################################
export PS4='+ $SECONDS $(basename $0) $stream $LINENO: '

set -xa
na=$(basename $0)

cd $DATA

msg="HAS BEGUN on $(hostname)"
postmsg "$jlogfile" "$msg"

echo cycle=$cycle

export jobdir="${2}"                   # ${DATA}/${stream}
export infile="${3}"                   # ${DATA}/${stream}/${stream}.in

. ${infile}

# Input file:
# jobgrid=                  # PRDGEN_GRID[$stream]
# grid_spec=                # PRDGEN_GRID_SPEC[$stream]
# hours=                    # PRDGEN_HOURS[$stream]
# submc=                    # PRDGEN_SUBMC[$stream]
# pgad=                     # PRDGEN_A_DIR[$stream]
# pgapre=                   # PRDGEN_A_PREFIX[$stream]
# parmlist_a00=             # PRDGEN_A_LIST_F00[$stream]
# parmlist_ahh=             # PRDGEN_A_LIST_FHH[$stream]
# pgbd=                     # PRDGEN_B_DIR[$stream]
# pgbpre=                   # PRDGEN_B_PREFIX[$stream]
# parmlist_b00=             # PRDGEN_B_LIST_F00[$stream]
# parmlist_bhh=             # PRDGEN_B_LIST_FHH[$stream]
# do_analysis=              # PRDGEN_DO_ANALYSIS[$stream]

cat <<-EOF
	Settings for $0:
	  RUNMEM: $RUNMEM
	  cyc: $cyc
	  DATA: $DATA
  
	  jobdir: $jobdir
	  stream: $stream
	  jobgrid: $jobgrid
	  grid_spec: $grid_spec
	  hours: ($hours)
	  submc: $submc
	  pgad: $pgad
	  pgapre: $pgapre
	  parmlist_a00: $parmlist_a00
	  parmlist_ahh: $parmlist_ahh
	  pgbd: $pgbd
	  pgbpre: $pgbpre
	  parmlist_b00: $parmlist_b00
	  parmlist_bhh: $parmlist_bhh
	  do_analysis: $do_analysis

EOF

export MP_LABELIO=YES
export GRID=$jobgrid   # GRID is part of the DBN message

############################################################
# clean up missing markers from previous run
############################################################
mkdir -m 775 -p $COMOUT/misc/$submc
cd $COMOUT/misc/$submc
rc=$?
if (( rc == 0 )); then
	for file in $RUNMEM.*.missing; do
		if [[ -f $file ]]; then
			echo "$(date) removing $COMOUT/misc/$submc/$file"
			rm -f $COMOUT/misc/$submc/$file
		fi
	done # for file in $RUNMEM.*.missing
fi # (( rc == 0 ))
#cd $DATA
cd $jobdir

SLEEP_LOOP_MAX=$(expr $SLEEP_TIME / $SLEEP_INT)

for hour in $hours; do
	if [[ $do_analysis = YES ]] && (( hour == 0 )); then
		export ffhr=anl
		export fhr=000

		if [[ $RUNMEM = "gegfs" ]]; then
			export mafile=$COMINgfs/gfs.$cycle.master.grb2anl
			export mifile=$COMINgfs/gfs.$cycle.master.grb2ianl
			export mcfile=""
			export makepgrb2b="no"
		else
			export mafile=$COMOUT/master/$RUNMEM.$cycle.master.grb2anl
			export mifile=$COMOUT/master/$RUNMEM.$cycle.master.grb2ianl
			export mcfile=$COMOUT/misc/post/$RUNMEM.$cycle.master.control.anl
			if [[ -z "$pgbd" ]]; then
				export makepgrb2b="no"
			else
				export makepgrb2b="yes"
			fi
		fi # [[ $RUNMEM = "gegfs" ]]

		export pcfile=$COMOUT/misc/$submc/${RUNMEM}.$cycle.prdgen.control.anl
		export fileaout=$COMOUT/$pgad/$RUNMEM.$cycle.${pgapre}anl
		export fileaouti=$COMOUT/$pgad/$RUNMEM.$cycle.${pgapre}anl.idx
		export filebout=$COMOUT/$pgbd/$RUNMEM.$cycle.${pgbpre}anl
		export filebouti=$COMOUT/$pgbd/$RUNMEM.$cycle.${pgbpre}anl.idx

		ic=1
		while [ $ic -le $SLEEP_LOOP_MAX ]; do
			if [[ $RUNMEM = "gegfs" ]]; then
				# Assume GFS is complete
				if [[ -f $mafile ]]; then
					break
				fi
			else
				# Check if control file has been created, to make sure file is complete before using
				testfhr=-1
				if [[ -f $mcfile ]]; then
					teststring=$(cat $mcfile|head -1)
					if [[ $teststring != '' ]]; then
						if [[ -f $mifile ]]; then
							testfhr=$(echo $teststring | cut -c11-13)
						fi
					fi # [[ $teststring != '' ]]
				fi # [[ -f $mcfile ]]
				echo "testfhr=$testfhr fhr=$fhr"

				if (( testfhr >= fhr )); then
					break
				fi # (( testfhr >= fhr ))
			fi

			ic=$(expr $ic + 1)
			sleep $SLEEP_INT

			###############################
			# If we reach this point assume
			# fcst job never reached restart 
			# period and write file to
			# indicate missing data
			###############################
			if [ $ic -eq $SLEEP_LOOP_MAX ]; then
				date >$COMOUT/misc/$submc/${RUNMEM}.t${cyc}z.anl.missing
				echo "$(date) $sname $stream post data missing for analysis"
				msg="$stream MISSING POST DATA for analysis"
				postmsg "$jlogfile" "$msg"
				export err=1; err_chk
			fi # [ $ic -eq $SLEEP_LOOP_MAX ]

		done # [ $ic -le $SLEEP_LOOP_MAX ]

		#
		# If control file already exists and skip if all output also present, otherwise
		#   delete control file to rerun. 
		#
		if [[ -s $pcfile ]]; then
			nmissing=0
			for file in $fileaout $fileaouti $filebout $filebouti; do
				if [[ ! -s $file ]]; then
					echo file=$file IS MISSING
					(( nmissing = nmissing + 1 ))
				fi
			done # for file in $fileaout $fileaouti $filebout $filebouti
			if (( nmissing > 0 )); then
				rm $pcfile
			fi
		else
			nmissing=1
		fi # [[ -s $pcfile ]]

		if [[ ! -s $pcfile ]]; then
			export parmlist_a=$parmlist_a00
			export parmlist_b=$parmlist_b00
			$USHgefs/gefs_prdgen.sh

			####################################
			# send control files to misc
			####################################
			if [ $SENDCOM = "YES" ]; then
				echo "$PDY$cyc$fhr" > $pcfile
			fi # test $SENDCOM = "YES"
		fi # [[ ! -s $pcfile ]]
	fi # [[ $do_analysis = YES ]] && (( hour == 0 ))

	export fhr=$(printf "%03.0f" $hour)        # Zero-pad to three places
	export ffhr="f${fhr}"

	###############################
	# Start Looping for the 
	# existence of the restart files
	###############################
	export pgm="postcheck"

	if [[ $RUNMEM = "gegfs" ]]; then
		export mafile=$COMINgfs/gfs.$cycle.master.grb2f$fhr
		export mifile=$COMINgfs/gfs.$cycle.master.grb2if$fhr
		export mcfile=""
		export makepgrb2b="no"
	else 
		export mafile=$COMOUT/master/$RUNMEM.$cycle.master.grb2f$fhr
		export mifile=$COMOUT/master/$RUNMEM.$cycle.master.grb2if$fhr
		export mcfile=$COMOUT/misc/post/$RUNMEM.$cycle.master.control.f$fhr
		if [[ -z "$pgbd" ]]; then
			export makepgrb2b="no"
		else
			export makepgrb2b="yes"
		fi
	fi # [[ $RUNMEM = "gegfs" ]]

	export pcfile=$COMOUT/misc/$submc/${RUNMEM}.t${cyc}z.prdgen.control.f$fhr
	export fileaout=$COMOUT/$pgad/$RUNMEM.$cycle.${pgapre}f${fhr}
	export fileaouti=$COMOUT/$pgad/$RUNMEM.$cycle.${pgapre}f${fhr}.idx
	export filebout=$COMOUT/$pgbd/$RUNMEM.$cycle.${pgbpre}f${fhr}
	export filebouti=$COMOUT/$pgbd/$RUNMEM.$cycle.${pgbpre}f${fhr}.idx

	if [[ $save_pgrb2_p5 = YES ]] && (( FHOUR > FHMAXHF )); then
		export mafile_p5=$COMOUT/pgrb2p5/$RUNMEM.$cycle.pgrb2.0p50.f${fhr}
		export mifile_p5=$COMOUT/pgrb2p5/$RUNMEM.$cycle.pgrb2.0p50.f${fhr}.idx
	fi
	if [[ $save_pgrb2_p25 = YES ]] && (( FHOUR <= FHMAXHF )); then
		export mafile_p25=$COMOUT/pgrb2p25/$RUNMEM.$cycle.pgrb2.0p25.f${fhr}
		export mifile_p25=$COMOUT/pgrb2p25/$RUNMEM.$cycle.pgrb2.0p25.f${fhr}.idx
	fi

	ic=1
	found="no"
	while [ $ic -le $SLEEP_LOOP_MAX ]; do
		if [[ $RUNMEM = "gegfs" ]]; then
			# Assume GFS is complete
			if [[ -f $mafile ]]; then
				found="yes"
				break
			else
				# GFS output is only every 12 hours after 240
				if (( fhr > 240 )) &&  (( fhr%12 == 6 )); then
					echo "fhr=$fhr not expected for GFS"
					break
				fi
			fi # [[ -f $mafile ]]
		else # [[ $RUNMEM = "gegfs" ]]
			# Check if control file has been created, to make sure file is complete before using
			testfhr=-1
			if [[ -f $mcfile ]]; then
				teststring=$(cat $mcfile|head -1)
				if [[ $teststring != '' ]]; then
					if [[ -f $mifile ]]; then
						testfhr=$(echo $teststring | cut -c11-13)
					fi
				fi # [[ $teststring != '' ]]
			fi # [[ -f $mcfile ]]
			echo "testfhr=$testfhr fhr=$fhr"

			if (( testfhr >= fhr )); then
				found="yes"
				break
			fi # (( testfhr >= fhr ))
		fi # [[ $RUNMEM = "gegfs" ]]

		ic=$(expr $ic + 1)
		sleep $SLEEP_INT

		###############################
		# If we reach this point assume
		# fcst job never reached restart 
		# period and error exit
		###############################
		if [ $ic -eq $SLEEP_LOOP_MAX ]; then
			date >$COMOUT/misc/$submc/${RUNMEM}.t${cyc}z.f$fhr.missing
			echo "$(date) $sname $stream missing post data for hour $fhr"
			msg="$stream MISSING POST DATA for hour $fhr"
			postmsg "$jlogfile" "$msg"
			export err=1; err_chk
			exit $err
		fi # [ $ic -eq $SLEEP_LOOP_MAX ]
	done # while [ $ic -le $SLEEP_LOOP_MAX ]

	if [[ $found = "yes" ]]; then
		msg="Starting post for fhr=$fhr"
		postmsg "$jlogfile" "$msg"

		#################################### 
		# control the inclusion of perturbation identifiers
		# in the GRIB1 ensemble PDS header extension
		####################################

		if [[ -s $pcfile ]]; then
			nmissing=0
			for file in $fileaout $fileaouti $filebout $filebouti; do
				if [[ ! -s $file ]]; then
					echo "file=$file IS MISSING"
					(( nmissing = nmissing + 1 ))
				fi
			done # for file in $fileaout $fileaouti $filebout $filebouti
			if (( nmissing > 0 )); then
				rm $pcfile
			fi
		else
			nmissing=1
		fi # [[ -s $pcfile ]]

		if [[ ! -s $pcfile ]]; then
			if (( hour == 0 )); then
				parmlist_a=$parmlist_a00
				parmlist_b=$parmlist_b00
			else
				parmlist_a=$parmlist_ahh
				parmlist_b=$parmlist_bhh
			fi
			export parmlist_a
			export parmlist_b
			$USHgefs/gefs_prdgen.sh

			# Check for error
			rc=$?
			if [[ $rc -ne 0 ]]; then
				msg="FATAL ERROR: gefs_prdgen.sh failed!"
				echo "$(date)    $msg"
				postmsg "$jlogfile" "$msg"
				export err=1
				err_chk
				exit $err
			fi

			####################################
			# send control files to misc
			####################################
			if [[ $SENDCOM = "YES" ]]; then
				echo "$PDY$cyc$fhr" > $pcfile
			fi # test $SENDCOM = "YES"
		fi # [[ ! -s $pcfile ]]

		#####################################################################
		#DHOU, 09/17/2015, added this block for global wave ensemble trigger
		#0p5 only
		#####################################################################
		#if [[ $SENDECF = "YES" && "$jobgrid" = "0p5" && $fhr -eq 240 ]]; then
		#	ecflow_client --event pgrb2ap5_f240_ready
		#fi
	fi # [[ $found = "yes" ]]
done # for hour in $hours

msg='ENDED NORMALLY.'
postmsg "$jlogfile" "$msg"

################## END OF SCRIPT #######################
